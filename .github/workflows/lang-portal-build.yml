name: Build and Push Lang Portal Service

on:
  push:
    branches: [main]
    paths:
      - "lang-portal/**"
  pull_request:
    branches: [main]
    paths:
      - "lang-portal/**"

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  PORT: 8080
  APP_ENV: production
  BLUEPRINT_DB_URL: ./words.db
  NEXT_PUBLIC_SENTRY_ENVIRONMENT: production
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: 'lang-portal/frontend/package-lock.json'

      - name: Install dependencies and build frontend
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: sorami
          SENTRY_PROJECT: lang-portal-frontend
        run: |
          cd lang-portal/frontend
          
          # Install dependencies with proper versioning
          npm install --legacy-peer-deps
          
          # Create production .env file
          cp .env.example .env
          
          # Build the application
          npm run build
          
          # Clean up sensitive data
          rm .env

      - name: Build and push Docker images
        env:
          DOCKER_BUILDKIT: 1
        run: |
          cd lang-portal
          
          # Setup backend environment
          if [ -f .env.example ]; then
            cp .env.example .env
          fi
          
          # Setup frontend environment (without sensitive tokens)
          if [ -f frontend/.env.example ]; then
            cp frontend/.env.example frontend/.env
            # Ensure no auth tokens are included
            sed -i '/SENTRY_AUTH_TOKEN/d' frontend/.env
          fi
          
          # Build and push images
          docker compose build \
            --build-arg BLUEPRINT_DB_URL=${BLUEPRINT_DB_URL} \
            --build-arg NODE_ENV=production
          docker compose push
          
          # Cleanup
          docker system prune -af
