name: Build and Push Lang Portal Service

on:
  push:
    branches: [main]
    paths:
      - "lang-portal/**"
  pull_request:
    branches: [main]
    paths:
      - "lang-portal/**"

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  PORT: 8080
  APP_ENV: production
  BLUEPRINT_DB_URL: ./words.db
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies and generate source maps
        run: |
          cd lang-portal/frontend
          npm install
          # Create .env with Sentry token for source map generation
          cp .env.example .env
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          npm run build
          # Remove the .env file to ensure it doesn't get into the Docker build
          rm .env

      - name: Build and push lang-portal services
        run: |
          cd lang-portal
          # Handle backend .env
          if [ -f .env.example ]; then
            cp .env.example .env
          fi
          # Handle frontend .env (without Sentry token)
          if [ -f frontend/.env.example ]; then
            cp frontend/.env.example frontend/.env
          fi
          # Build without needing Sentry token
          docker compose build --build-arg BLUEPRINT_DB_URL=${BLUEPRINT_DB_URL}
          docker compose push
          docker system prune -af
